// Generated by CoffeeScript 1.9.1

/*

  Sailortable by Kyle Ideta
  Version 1.0
 */

(function() {
  'use strict';
  var addEmptyCell, conRoute, ctrSailorTable, ctrSingle, ctrTable, ctrTableElement, getRandom, mdDescription, mdElements, replaceCell, sailorTable, srvElement, tableElement;

  addEmptyCell = function(source, amount, start, period) {
    var i, j, ref, results;
    results = [];
    for (i = j = 0, ref = amount; 0 <= ref ? j < ref : j > ref; i = 0 <= ref ? ++j : --j) {
      results.push(source.splice(start, 0, {
        period: period != null ? period : -1
      }));
    }
    return results;
  };

  replaceCell = function(source, target, start, end, period) {
    var arr;
    arr = source.slice(start, end);
    source.splice(start, end);
    addEmptyCell(arr, 2, 0);
    addEmptyCell(source, 1, start, period);
    return target.push({
      elements: arr
    });
  };

  getRandom = function(min, max) {
    return Math.floor(Math.random() * max + min);
  };

  conRoute = function($routeProvider) {
    return $routeProvider.when('/', {
      templateUrl: './assets/template/table.html',
      controller: 'ctrTable'
    }).when('/element/:number', {
      templateUrl: './assets/template/single.html',
      controller: 'ctrSingle',
      controllerAs: 'single'
    }).otherwise({
      redirectTo: '/'
    });
  };

  mdElements = function($resource, dataUrl) {
    return $resource(dataUrl.elements);
  };

  mdDescription = function($resource, dataUrl) {
    return $resource(dataUrl.freebase, {
      key: 'AIzaSyBj37kE9cDSOIA2REC53mbz2ostGty-ojY'
    });
  };

  sailorTable = function() {
    return {
      controller: 'ctrSailorTable as sailortable'
    };
  };

  tableElement = function() {
    return {
      templateUrl: './assets/template/table-element.html',
      controller: 'ctrTableElement as item'
    };
  };

  srvElement = function() {
    return {
      getType: function(element) {
        if (element == null) {
          return 'no-type';
        }
        switch (element.category) {
          case 'Alkali Metal':
            return 'type-a';
          case 'Alkaline Earth Metal':
            return 'type-b';
          case 'Transition Metal':
            return 'type-c';
          case 'Halogen':
            return 'type-d';
          case 'Noble Gas':
            return 'type-e';
          case 'Nonmetal':
            return 'type-f';
          case 'Metalloid':
            return 'type-g';
          case 'Base Metal':
            return 'type-h';
          case 'Lanthanoid':
            return 'type-i';
          case 'Actinoid':
            return 'type-j';
          case 'Unknown':
            return 'type-k';
        }
      }
    };
  };

  ctrSailorTable = function($scope, $interval, $route, mdElements, srvElement) {
    mdElements.get().$promise.then((function(_this) {
      return function(res) {
        var element, elements, j, k, len, len1, period, ref, results, set;
        _this.res = res;
        _this.allElem = [];
        _this.mode = 'S';
        _this.ready = false;
        ref = _this.res.data;
        results = [];
        for (j = 0, len = ref.length; j < len; j++) {
          set = ref[j];
          period = set.period;
          elements = set.elements;
          Array.prototype.push.apply(_this.allElem, elements);
          for (k = 0, len1 = elements.length; k < len1; k++) {
            element = elements[k];
            element.pos = {
              left: getRandom(-500, 700) + 'px',
              top: getRandom(-400, 800) + 'px'
            };
          }
          switch (period) {
            case 1:
              results.push(addEmptyCell(elements, 16, 1, period));
              break;
            case 2:
            case 3:
              results.push(addEmptyCell(elements, 10, 2, period));
              break;
            case 6:
            case 7:
              results.push(replaceCell(elements, _this.res.data, 2, 15, period));
              break;
            default:
              results.push(void 0);
          }
        }
        return results;
      };
    })(this));
    return $scope.$on('$routeChangeSuccess', function(event, next, current) {
      if (current == null) {
        $interval((function() {
          var element, j, k, len, len1, ref, ref1, set;
          ref = $scope.sailortable.res.data;
          for (j = 0, len = ref.length; j < len; j++) {
            set = ref[j];
            ref1 = set.elements;
            for (k = 0, len1 = ref1.length; k < len1; k++) {
              element = ref1[k];
              element.pos = {
                left: 0,
                top: 0
              };
            }
          }
          return $scope.sailortable.ready = true;
        }), 2000);
      }
      return $scope.setColor = function() {
        return srvElement.getType(next != null ? next.scope.element : void 0);
      };
    });
  };

  ctrTable = function($scope) {};

  ctrTableElement = function($scope, srvElement) {
    return $scope.setCellColor = function() {
      return srvElement.getType($scope.element);
    };
  };

  ctrSingle = function($scope, $routeParams, mdDescription) {
    $scope.element = $scope.sailortable.allElem[$routeParams.number - 1];
    $scope.shell = ['K', 'L', 'M', 'N', 'O', 'P', 'Q'];
    if ($scope.element.description == null) {
      return mdDescription.get({
        id: $scope.element.freebase,
        filter: '/common/topic/description'
      }).$promise.then((function(_this) {
        return function(res) {
          return $scope.element.description = res.property['/common/topic/description'].values[0].value;
        };
      })(this));
    }
  };

  angular.module('sailorTable', ['ngResource', 'ngRoute', 'ngAnimate']).constant('dataUrl', {
    elements: 'assets/data/elements.json',
    freebase: 'https://www.googleapis.com/freebase/v1/topic/:id'
  }).config(conRoute).factory('mdElements', mdElements).factory('mdDescription', mdDescription).factory('srvElement', srvElement).directive('sailorTable', sailorTable).directive('tableElement', tableElement).controller('ctrSailorTable', ['$scope', '$interval', '$route', 'mdElements', 'srvElement', ctrSailorTable]).controller('ctrSingle', ['$scope', '$routeParams', 'mdDescription', ctrSingle]).controller('ctrTable', ['$scope', ctrTable]).controller('ctrTableElement', ['$scope', 'srvElement', ctrTableElement]);

  angular.module('app', ['sailorTable']);

}).call(this);

//# sourceMappingURL=apps.js.map
